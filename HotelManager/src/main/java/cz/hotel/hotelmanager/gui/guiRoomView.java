/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cz.hotel.hotelmanager.gui;

import cz.hotel.hotelmanager.entity.Guest;
import cz.hotel.hotelmanager.entity.Room;
import cz.hotel.hotelmanager.manager.GuestManager;
import cz.hotel.hotelmanager.manager.HotelManager;
import cz.hotel.hotelmanager.manager.RoomManager;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutionException;
import javax.swing.SwingWorker;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class guiRoomView extends javax.swing.JFrame {

    private RoomManager roomManager = null;
    private HotelManager manager = null;
    private GuestManager guestManager = null;
    Room show = null;
    List<Guest> guests = null;
    private static final Logger logger = LoggerFactory.getLogger(guiRoomView.class);

    public void setGuestManager(GuestManager guestManager) {
        this.guestManager = guestManager;
    }
    

    public void setHotelManager(HotelManager manager) {
        this.manager = manager;
    }

    public void setRoomManager(RoomManager roomManager) {
        this.roomManager = roomManager;
    }

    
    /**
     * Creates new form guiRoomView
     */
    public guiRoomView() {
        initComponents();
        buttonSearch.setEnabled(false);
        labelValCapacity.setText("");
        labelValPrice.setText("");
        labelValRoomNum.setText("");
    }
    
    public void ready() {
        GetAllRooms exec = new GetAllRooms();
        exec.execute();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        listGuests = new javax.swing.JList<>();
        buttonCancel = new javax.swing.JButton();
        comboRooms = new javax.swing.JComboBox<>();
        panelValues = new javax.swing.JPanel();
        labelPrice = new javax.swing.JLabel();
        labelValCapacity = new javax.swing.JLabel();
        labelCapacity = new javax.swing.JLabel();
        labelRoomNum = new javax.swing.JLabel();
        labelValRoomNum = new javax.swing.JLabel();
        labelValPrice = new javax.swing.JLabel();
        buttonSearch = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setViewportView(listGuests);

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("cz/hotel/hotelmanager/gui/Bundle"); // NOI18N
        buttonCancel.setText(bundle.getString("guiRoomView.buttonCancel.text")); // NOI18N
        buttonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelActionPerformed(evt);
            }
        });

        comboRooms.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        labelPrice.setText(bundle.getString("guiRoomView.labelPrice.text")); // NOI18N

        labelValCapacity.setText(bundle.getString("guiRoomView.labelValCapacity.text")); // NOI18N

        labelCapacity.setText(bundle.getString("guiRoomView.labelCapacity.text")); // NOI18N

        labelRoomNum.setText(bundle.getString("guiRoomView.labelRoomNum.text")); // NOI18N

        labelValRoomNum.setText(bundle.getString("guiRoomView.labelValRoomNum.text")); // NOI18N

        labelValPrice.setText(bundle.getString("guiRoomView.labelValPrice.text")); // NOI18N

        javax.swing.GroupLayout panelValuesLayout = new javax.swing.GroupLayout(panelValues);
        panelValues.setLayout(panelValuesLayout);
        panelValuesLayout.setHorizontalGroup(
            panelValuesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelValuesLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelValuesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelRoomNum)
                    .addComponent(labelCapacity)
                    .addComponent(labelPrice))
                .addGap(40, 40, 40)
                .addGroup(panelValuesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(labelValCapacity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelValRoomNum, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelValPrice, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelValuesLayout.setVerticalGroup(
            panelValuesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelValuesLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelValuesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelValRoomNum)
                    .addComponent(labelRoomNum))
                .addGap(18, 18, 18)
                .addGroup(panelValuesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelValCapacity)
                    .addComponent(labelCapacity))
                .addGap(18, 18, 18)
                .addGroup(panelValuesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelPrice)
                    .addComponent(labelValPrice))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        buttonSearch.setText(bundle.getString("guiRoomView.buttonSearch.text")); // NOI18N
        buttonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(comboRooms, 0, 160, Short.MAX_VALUE)
                            .addComponent(buttonCancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(buttonSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelValues, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(comboRooms, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(55, 55, 55)
                        .addComponent(buttonSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(buttonCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(panelValues, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_buttonCancelActionPerformed

    private void buttonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSearchActionPerformed
        String room = (String) comboRooms.getSelectedItem();
        if (room == null || room.isEmpty()) {
            logger.error("No room is selected!");
            return;
        }
        
        new SwingWorker<Room, Void>() {
            @Override
            protected Room doInBackground() throws Exception {
                List<Room> rooms = roomManager.findAllRooms();
                for (Room el: rooms) {
                    if (room.equals(Integer.toString(el.getRoomNumber()))) {
                        guests = manager.findGuestsInRoom(el);
                        return el;
                    }
                }
                return null;
            }
            
            @Override
            protected void done() {
                try {
                    show = get();
                } catch (InterruptedException ex) {
                    logger.error(ex.getMessage());
                } catch (ExecutionException ex) {
                    logger.error(ex.getMessage());
                }
                
                labelValCapacity.setText(Integer.toString(show.getCapacity()));
                labelValPrice.setText(show.getPrice().toString());
                labelValRoomNum.setText(Integer.toString(show.getRoomNumber()));
                List<String> names = new ArrayList<>();
                for (Guest el: guests) {
                    names.add(el.getName());
                }
                listGuests.setListData(names.toArray(new String[names.size()]));
            }
            
        }.execute();
        
    }//GEN-LAST:event_buttonSearchActionPerformed

    private class GetAllRooms extends SwingWorker<List<Room>, Void> {

        @Override
        protected List<Room> doInBackground() throws Exception {
            List<Room> rooms = roomManager.findAllRooms();
            return rooms;
        }
        
        @Override
        protected void done() {
            List<Room> rooms = null;
            try {
                rooms = get();
            } catch (InterruptedException ex) {
                logger.error(ex.getMessage());
            } catch (ExecutionException ex) {
                logger.error(ex.getMessage());
            }
            
            List<String> roomNumbers = new ArrayList<>();
            comboRooms.removeAllItems();
            for (Room el: rooms) {
                comboRooms.addItem(Integer.toString(el.getRoomNumber()));
            }
            buttonSearch.setEnabled(true);
            
            
            
            
        }
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCancel;
    private javax.swing.JButton buttonSearch;
    private javax.swing.JComboBox<String> comboRooms;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelCapacity;
    private javax.swing.JLabel labelPrice;
    private javax.swing.JLabel labelRoomNum;
    private javax.swing.JLabel labelValCapacity;
    private javax.swing.JLabel labelValPrice;
    private javax.swing.JLabel labelValRoomNum;
    private javax.swing.JList<String> listGuests;
    private javax.swing.JPanel panelValues;
    // End of variables declaration//GEN-END:variables
}
